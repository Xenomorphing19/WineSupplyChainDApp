// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
// Define a contract 'Supplychain'
contract SupplyChain {

  // *** TERMINOLOGY ***
  // - Viticulture = grape growing and cultivating process
  // - Vinification = Winemaking process
  // - Elevage = Barrel ageing process
  // - Vigneron = a person who cultivates grapes for winemaking
  // - Vineyard = plantation of grape-bearing vines for winemaking 


  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define enum 'State' with the following values:
  enum State 
  { 
    Viticultured, // 0
    Vinified,     // 1
    Elevaged,     // 2
    Packed,       // 3
    ForSale,      // 4
    Sold,         // 5
    Shipped,      // 6
    Received,     // 7
    Purchased     // 8
    }

  State constant defaultState = State.Viticultured;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the vigneron, goes on the package, can be verified by the Consumer
    address ownerID;  // Ethereum address of the current owner as the product moves through 8 stages
    address originVigneronID; // Ethereum address of the Vigneron
    string  originVineyardName; // Vineyard Name
    string  originVineyardInformation;  // Vineyard Information
    string  originVineyardLatitude; // Vineyard Latitude
    string  originVineyardLongitude;  // Vineyard Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    uint256 productAge; // Age of the wine 
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Ethereum address of the Distributor
    address retailerID; // Ethereum address of the Retailer
    address consumerID; // Ethereum address of the Consumer
  }

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Viticultured(uint upc); // Viticulture = grape growing and cultivating process
  event Vinified(uint upc); // Vinification = Winemaking process
  event Elevaged(uint upc, uint age); // Elevage = Barrel Ageing process
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    address consumer = items[_upc].consumerID;
    payable(consumer).transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier viticultured(uint _upc) {
    require(items[_upc].itemState == State.Viticultured, "The item state is not 'Harvested' ");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier vinified(uint _upc) {
    require(items[_upc].itemState == State.Vinified, "The item state is not 'Processed' ");
    _;
  }

  modifier elevaged(uint _upc) {
    require(items[_upc].itemState == State.Elevaged, "The item state is not 'Processed' ");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "The item state is not 'Packed' ");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "The item state is not 'ForSale' ");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "The item state is not 'Sold' ");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "The item state is not 'Shipped' ");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "The item state is not 'Received' ");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "The item state is not 'Purchased' ");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(payable(owner));
    }
  }

  // Define a function 'vinicultureItem' that allows a vigneron to mark an item 'vinicultured'
  function viticultureItem(uint _upc, 
                       address _originVigneronID, 
                       string memory _originVineyardName, 
                       string memory _originVineyardInformation, 
                       string  memory _originVineyardLatitude, 
                       string  memory _originVineyardLongitude, 
                       string  memory _productNotes) 
  public {
    // Add the new item as part of Harvest
    uint256 _productID = sku + _upc;

    items[_upc]= Item({sku: sku, 
                       upc: _upc,
                       ownerID: _originVigneronID,
                       originVigneronID: _originVigneronID,
                       originVineyardName: _originVineyardName,
                       originVineyardInformation: _originVineyardInformation,  
                       originVineyardLatitude: _originVineyardLatitude,
                       originVineyardLongitude: _originVineyardLongitude,
                       productID: _productID,
                       productAge: 0, 
                       productNotes: _productNotes,
                       productPrice: 0,
                       itemState: State.Viticultured,
                       distributorID: address(0),  
                       retailerID: address(0),
                       consumerID: address(0)
                       });
    
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Viticultured(_upc);
    
  }

  // Define a function 'vinifiedtItem' that allows a vigneron to mark an item 'Vinified'
  function vinifiedItem(uint _upc) public viticultured(_upc) verifyCaller(msg.sender){
    // Update the item's State
    items[_upc].itemState = State.Vinified;
    // Emit the appropriate event
    emit Vinified(_upc);
    
  }

  // Define a function 'elevageItem' that allows a vigneron to mark an item 'Elevaged'
  function elevageItem(uint _upc, uint256 _age) public vinified(_upc) verifyCaller(msg.sender){
    // Update the item's State
    items[_upc].itemState = State.Elevaged;
    items[_upc].productAge = _age;
    // Emit the appropriate event
    emit Elevaged(_upc, _age);
    
  }

  // Define a function 'packItem' that allows a vigneron to mark an item 'Packed'
  function packItem(uint _upc) public elevaged(_upc) verifyCaller(msg.sender){
    // Update the item's State
    items[_upc].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a vigneron to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public packed(_upc) verifyCaller(msg.sender){
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable forSale(_upc) paidEnough(msg.value) checkValue(upc) {
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;

    address vigneronAdd = items[upc].originVigneronID;
    uint256 amount = items[_upc].productPrice;

    // Transfer money to vigneron
    (bool success, ) = payable(vigneronAdd).call{value: amount}("");
    require(success, "Transfer failed");
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public sold(_upc) verifyCaller(msg.sender){
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
    
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public shipped(_upc) 
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
    
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  ( uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originVigneronID,
    string  memory originVineyardName,
    string  memory originVineyardInformation,
    string  memory originVineyardLatitude,
    string  memory originVineyardLongitude ) 
  {
  // Assign values to the 8 parameters
  itemSKU = items[_upc].sku;
  itemUPC = _upc;
  ownerID = items[_upc].ownerID;
  originVigneronID = items[_upc].originVigneronID;
  originVineyardName = items[_upc].originVineyardName;
  originVineyardInformation = items[_upc].originVineyardInformation;
  originVineyardLatitude = items[_upc].originVineyardLatitude;
  originVineyardLongitude = items[_upc].originVineyardLongitude;

    
  return ( itemSKU,
           itemUPC,
           ownerID,
           originVigneronID,
           originVineyardName,
           originVineyardInformation,
           originVineyardLatitude,
           originVineyardLongitude );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  ( uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    uint    productAge,
    string  memory productNotes,
    uint    productPrice,
    uint    itemState,
    address distributorID,
    address retailerID,
    address consumerID ) 
  {
    // Assign values to the 9 parameters
  itemSKU = items[_upc].sku;
  itemUPC = _upc;
  productID = items[_upc].productID;
  productAge = items[_upc].productAge;
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  itemState = uint256(items[_upc].itemState);
  distributorID = items[_upc].distributorID;
  retailerID = items[_upc].retailerID;
  consumerID = items[_upc].consumerID;
    
  return 
  ( itemSKU,
    itemUPC,
    productID,
    productAge,
    productNotes,
    productPrice,
    itemState,
    distributorID,
    retailerID,
    consumerID );
  }

}
